/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserImport } from './routes/user'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as CompanyImport } from './routes/company'
import { Route as IndexImport } from './routes/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as DemoTableImport } from './routes/demo.table'
import { Route as DemoStoreImport } from './routes/demo.store'
import { Route as CompanyLoginFormImport } from './routes/company/login-form'
import { Route as CompanyAiAnalysisImport } from './routes/company/ai-analysis'
import { Route as UserSurveyIndexImport } from './routes/user/survey/index'
import { Route as CompanySurveyIndexImport } from './routes/company/survey/index'
import { Route as CompanyCustomerIndexImport } from './routes/company/customer/index'
import { Route as UserSurveyIdImport } from './routes/user/survey/$id'
import { Route as DemoFormSimpleImport } from './routes/demo.form.simple'
import { Route as DemoFormAddressImport } from './routes/demo.form.address'
import { Route as CompanySurveyCreateImport } from './routes/company/survey/create'
import { Route as CompanySurveyIdImport } from './routes/company/survey/$id'
import { Route as CompanyCustomerCreateImport } from './routes/company/customer/create'
import { Route as CompanyCustomerIdImport } from './routes/company/customer/$id'

// Create/Update Routes

const UserRoute = UserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CompanyRoute = CompanyImport.update({
  id: '/company',
  path: '/company',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const DemoTableRoute = DemoTableImport.update({
  id: '/demo/table',
  path: '/demo/table',
  getParentRoute: () => rootRoute,
} as any)

const DemoStoreRoute = DemoStoreImport.update({
  id: '/demo/store',
  path: '/demo/store',
  getParentRoute: () => rootRoute,
} as any)

const CompanyLoginFormRoute = CompanyLoginFormImport.update({
  id: '/login-form',
  path: '/login-form',
  getParentRoute: () => CompanyRoute,
} as any)

const CompanyAiAnalysisRoute = CompanyAiAnalysisImport.update({
  id: '/ai-analysis',
  path: '/ai-analysis',
  getParentRoute: () => CompanyRoute,
} as any)

const UserSurveyIndexRoute = UserSurveyIndexImport.update({
  id: '/survey/',
  path: '/survey/',
  getParentRoute: () => UserRoute,
} as any)

const CompanySurveyIndexRoute = CompanySurveyIndexImport.update({
  id: '/survey/',
  path: '/survey/',
  getParentRoute: () => CompanyRoute,
} as any)

const CompanyCustomerIndexRoute = CompanyCustomerIndexImport.update({
  id: '/customer/',
  path: '/customer/',
  getParentRoute: () => CompanyRoute,
} as any)

const UserSurveyIdRoute = UserSurveyIdImport.update({
  id: '/survey/$id',
  path: '/survey/$id',
  getParentRoute: () => UserRoute,
} as any)

const DemoFormSimpleRoute = DemoFormSimpleImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRoute,
} as any)

const DemoFormAddressRoute = DemoFormAddressImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRoute,
} as any)

const CompanySurveyCreateRoute = CompanySurveyCreateImport.update({
  id: '/survey/create',
  path: '/survey/create',
  getParentRoute: () => CompanyRoute,
} as any)

const CompanySurveyIdRoute = CompanySurveyIdImport.update({
  id: '/survey/$id',
  path: '/survey/$id',
  getParentRoute: () => CompanyRoute,
} as any)

const CompanyCustomerCreateRoute = CompanyCustomerCreateImport.update({
  id: '/customer/create',
  path: '/customer/create',
  getParentRoute: () => CompanyRoute,
} as any)

const CompanyCustomerIdRoute = CompanyCustomerIdImport.update({
  id: '/customer/$id',
  path: '/customer/$id',
  getParentRoute: () => CompanyRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/company': {
      id: '/company'
      path: '/company'
      fullPath: '/company'
      preLoaderRoute: typeof CompanyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/company/ai-analysis': {
      id: '/company/ai-analysis'
      path: '/ai-analysis'
      fullPath: '/company/ai-analysis'
      preLoaderRoute: typeof CompanyAiAnalysisImport
      parentRoute: typeof CompanyImport
    }
    '/company/login-form': {
      id: '/company/login-form'
      path: '/login-form'
      fullPath: '/company/login-form'
      preLoaderRoute: typeof CompanyLoginFormImport
      parentRoute: typeof CompanyImport
    }
    '/demo/store': {
      id: '/demo/store'
      path: '/demo/store'
      fullPath: '/demo/store'
      preLoaderRoute: typeof DemoStoreImport
      parentRoute: typeof rootRoute
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/demo/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableImport
      parentRoute: typeof rootRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/company/customer/$id': {
      id: '/company/customer/$id'
      path: '/customer/$id'
      fullPath: '/company/customer/$id'
      preLoaderRoute: typeof CompanyCustomerIdImport
      parentRoute: typeof CompanyImport
    }
    '/company/customer/create': {
      id: '/company/customer/create'
      path: '/customer/create'
      fullPath: '/company/customer/create'
      preLoaderRoute: typeof CompanyCustomerCreateImport
      parentRoute: typeof CompanyImport
    }
    '/company/survey/$id': {
      id: '/company/survey/$id'
      path: '/survey/$id'
      fullPath: '/company/survey/$id'
      preLoaderRoute: typeof CompanySurveyIdImport
      parentRoute: typeof CompanyImport
    }
    '/company/survey/create': {
      id: '/company/survey/create'
      path: '/survey/create'
      fullPath: '/company/survey/create'
      preLoaderRoute: typeof CompanySurveyCreateImport
      parentRoute: typeof CompanyImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressImport
      parentRoute: typeof rootRoute
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleImport
      parentRoute: typeof rootRoute
    }
    '/user/survey/$id': {
      id: '/user/survey/$id'
      path: '/survey/$id'
      fullPath: '/user/survey/$id'
      preLoaderRoute: typeof UserSurveyIdImport
      parentRoute: typeof UserImport
    }
    '/company/customer/': {
      id: '/company/customer/'
      path: '/customer'
      fullPath: '/company/customer'
      preLoaderRoute: typeof CompanyCustomerIndexImport
      parentRoute: typeof CompanyImport
    }
    '/company/survey/': {
      id: '/company/survey/'
      path: '/survey'
      fullPath: '/company/survey'
      preLoaderRoute: typeof CompanySurveyIndexImport
      parentRoute: typeof CompanyImport
    }
    '/user/survey/': {
      id: '/user/survey/'
      path: '/survey'
      fullPath: '/user/survey'
      preLoaderRoute: typeof UserSurveyIndexImport
      parentRoute: typeof UserImport
    }
  }
}

// Create and export the route tree

interface CompanyRouteChildren {
  CompanyAiAnalysisRoute: typeof CompanyAiAnalysisRoute
  CompanyLoginFormRoute: typeof CompanyLoginFormRoute
  CompanyCustomerIdRoute: typeof CompanyCustomerIdRoute
  CompanyCustomerCreateRoute: typeof CompanyCustomerCreateRoute
  CompanySurveyIdRoute: typeof CompanySurveyIdRoute
  CompanySurveyCreateRoute: typeof CompanySurveyCreateRoute
  CompanyCustomerIndexRoute: typeof CompanyCustomerIndexRoute
  CompanySurveyIndexRoute: typeof CompanySurveyIndexRoute
}

const CompanyRouteChildren: CompanyRouteChildren = {
  CompanyAiAnalysisRoute: CompanyAiAnalysisRoute,
  CompanyLoginFormRoute: CompanyLoginFormRoute,
  CompanyCustomerIdRoute: CompanyCustomerIdRoute,
  CompanyCustomerCreateRoute: CompanyCustomerCreateRoute,
  CompanySurveyIdRoute: CompanySurveyIdRoute,
  CompanySurveyCreateRoute: CompanySurveyCreateRoute,
  CompanyCustomerIndexRoute: CompanyCustomerIndexRoute,
  CompanySurveyIndexRoute: CompanySurveyIndexRoute,
}

const CompanyRouteWithChildren =
  CompanyRoute._addFileChildren(CompanyRouteChildren)

interface UserRouteChildren {
  UserSurveyIdRoute: typeof UserSurveyIdRoute
  UserSurveyIndexRoute: typeof UserSurveyIndexRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserSurveyIdRoute: UserSurveyIdRoute,
  UserSurveyIndexRoute: UserSurveyIndexRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/company': typeof CompanyRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/user': typeof UserRouteWithChildren
  '/company/ai-analysis': typeof CompanyAiAnalysisRoute
  '/company/login-form': typeof CompanyLoginFormRoute
  '/demo/store': typeof DemoStoreRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/company/customer/$id': typeof CompanyCustomerIdRoute
  '/company/customer/create': typeof CompanyCustomerCreateRoute
  '/company/survey/$id': typeof CompanySurveyIdRoute
  '/company/survey/create': typeof CompanySurveyCreateRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/user/survey/$id': typeof UserSurveyIdRoute
  '/company/customer': typeof CompanyCustomerIndexRoute
  '/company/survey': typeof CompanySurveyIndexRoute
  '/user/survey': typeof UserSurveyIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/company': typeof CompanyRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/user': typeof UserRouteWithChildren
  '/company/ai-analysis': typeof CompanyAiAnalysisRoute
  '/company/login-form': typeof CompanyLoginFormRoute
  '/demo/store': typeof DemoStoreRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/company/customer/$id': typeof CompanyCustomerIdRoute
  '/company/customer/create': typeof CompanyCustomerCreateRoute
  '/company/survey/$id': typeof CompanySurveyIdRoute
  '/company/survey/create': typeof CompanySurveyCreateRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/user/survey/$id': typeof UserSurveyIdRoute
  '/company/customer': typeof CompanyCustomerIndexRoute
  '/company/survey': typeof CompanySurveyIndexRoute
  '/user/survey': typeof UserSurveyIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/company': typeof CompanyRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/user': typeof UserRouteWithChildren
  '/company/ai-analysis': typeof CompanyAiAnalysisRoute
  '/company/login-form': typeof CompanyLoginFormRoute
  '/demo/store': typeof DemoStoreRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/company/customer/$id': typeof CompanyCustomerIdRoute
  '/company/customer/create': typeof CompanyCustomerCreateRoute
  '/company/survey/$id': typeof CompanySurveyIdRoute
  '/company/survey/create': typeof CompanySurveyCreateRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/user/survey/$id': typeof UserSurveyIdRoute
  '/company/customer/': typeof CompanyCustomerIndexRoute
  '/company/survey/': typeof CompanySurveyIndexRoute
  '/user/survey/': typeof UserSurveyIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/company'
    | '/login'
    | '/register'
    | '/user'
    | '/company/ai-analysis'
    | '/company/login-form'
    | '/demo/store'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/company/customer/$id'
    | '/company/customer/create'
    | '/company/survey/$id'
    | '/company/survey/create'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/user/survey/$id'
    | '/company/customer'
    | '/company/survey'
    | '/user/survey'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/company'
    | '/login'
    | '/register'
    | '/user'
    | '/company/ai-analysis'
    | '/company/login-form'
    | '/demo/store'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/company/customer/$id'
    | '/company/customer/create'
    | '/company/survey/$id'
    | '/company/survey/create'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/user/survey/$id'
    | '/company/customer'
    | '/company/survey'
    | '/user/survey'
  id:
    | '__root__'
    | '/'
    | '/company'
    | '/login'
    | '/register'
    | '/user'
    | '/company/ai-analysis'
    | '/company/login-form'
    | '/demo/store'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/company/customer/$id'
    | '/company/customer/create'
    | '/company/survey/$id'
    | '/company/survey/create'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/user/survey/$id'
    | '/company/customer/'
    | '/company/survey/'
    | '/user/survey/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CompanyRoute: typeof CompanyRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  UserRoute: typeof UserRouteWithChildren
  DemoStoreRoute: typeof DemoStoreRoute
  DemoTableRoute: typeof DemoTableRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CompanyRoute: CompanyRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  UserRoute: UserRouteWithChildren,
  DemoStoreRoute: DemoStoreRoute,
  DemoTableRoute: DemoTableRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/company",
        "/login",
        "/register",
        "/user",
        "/demo/store",
        "/demo/table",
        "/demo/tanstack-query",
        "/demo/form/address",
        "/demo/form/simple"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/company": {
      "filePath": "company.tsx",
      "children": [
        "/company/ai-analysis",
        "/company/login-form",
        "/company/customer/$id",
        "/company/customer/create",
        "/company/survey/$id",
        "/company/survey/create",
        "/company/customer/",
        "/company/survey/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/user": {
      "filePath": "user.tsx",
      "children": [
        "/user/survey/$id",
        "/user/survey/"
      ]
    },
    "/company/ai-analysis": {
      "filePath": "company/ai-analysis.tsx",
      "parent": "/company"
    },
    "/company/login-form": {
      "filePath": "company/login-form.tsx",
      "parent": "/company"
    },
    "/demo/store": {
      "filePath": "demo.store.tsx"
    },
    "/demo/table": {
      "filePath": "demo.table.tsx"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/company/customer/$id": {
      "filePath": "company/customer/$id.tsx",
      "parent": "/company"
    },
    "/company/customer/create": {
      "filePath": "company/customer/create.tsx",
      "parent": "/company"
    },
    "/company/survey/$id": {
      "filePath": "company/survey/$id.tsx",
      "parent": "/company"
    },
    "/company/survey/create": {
      "filePath": "company/survey/create.tsx",
      "parent": "/company"
    },
    "/demo/form/address": {
      "filePath": "demo.form.address.tsx"
    },
    "/demo/form/simple": {
      "filePath": "demo.form.simple.tsx"
    },
    "/user/survey/$id": {
      "filePath": "user/survey/$id.tsx",
      "parent": "/user"
    },
    "/company/customer/": {
      "filePath": "company/customer/index.tsx",
      "parent": "/company"
    },
    "/company/survey/": {
      "filePath": "company/survey/index.tsx",
      "parent": "/company"
    },
    "/user/survey/": {
      "filePath": "user/survey/index.tsx",
      "parent": "/user"
    }
  }
}
ROUTE_MANIFEST_END */
